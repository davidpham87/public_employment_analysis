choseCRANMirror()
choseCRANMirror
?choseCRANMirror
chooseCRANmirror
chooseCRANmirror()
m <- getCRANmirrors(all = FALSE, local.only = FALSE)
m
setInternet2()
setInternet?
()
setInternet2
gdp
?write.csv
gdp
?fread
write.csv?
()
?write.csv
gdp
gdp
missing.rate
barplot(missing.rate)
barplot(missing.rate, horiz=T)
barplot(missing.rate, horiz=T, angle=0)
barplot(missing.rate, horiz=T, angle=90)
sessionInfo()
eo
colnames(eo)
eo
eo[, summary(Variable)]
eo[, summary(as.factor(Variable))]
eo[, sort(summary(as.factor(Variable)))]
eo[, summary(sort(as.factor(Variable)))]
install.packages('rsdmx')
loadPackages()
loadPackages()
eo
str(eo)
sessionInfo()
str(eo.li, 1)
str(eo.li, 2)
install.packages('rjsdmx')
install.packages('RJSDMX')
library(RJSDMX)
str(eo.li)
str(eo.li, 1)
str(eo.li, 2)
str(ds, 1)
str(ds, 1)
str(ds, 2)
ds[[1]]
str(ds, 1)
str(ds[[-1]], 1)
str(ds[-1], 1)
parseSerieKey(ds[[1]])
parseSeriesKey(ds[[1]])
parseSeriesKey(ds[[1]])
parseSeriesKey(ds[[1]][[1]])
debug(parseSeriekey)
debug(parseSerieKey)
debug(parseSeriesKey)
parseSeriesKey(ds[[1]][[1]])
n
n
li
li
n
li
parseSeriesKey(ds[[1]][[1]])
ds[1]
str(ds[1])
str(ds[1], 1)
str(ds[[1]], 1)
str(serie[c(-1, -2)], 2)
str(ds[c(-1, -2)], 1)
str(ds[1][c(-1, -2)], 1)
str(ds[2][c(-1, -2)], 1)
str(ds[3][c(-1, -2)], 1)
ds[1]
str(ds[1], 2)
str(ds[[1]][c(-1, -2)], 2)
str(ds[[1]][c(-1, -2)], 1)
ds[[1]][c(-1, -2)][[1]]
parseSerie(ds[[1]][c(-1, -2)][[1]])
parseSerie(ds[[1]][c(-1, -2)][[1]])
parseSerie(ds[[1]][c(-1, -2)][[1]])
parseSerie(ds[[1]])
parseSerie(ds[[1]])
n
n
n
serie[c(-1, -2)]
parseSerie(ds[[1]])
n
n
serie[c(-1, -2)]
str(serie[c(-1, -2)], 2)
str(serie[c(-1, -2)], 1)
serie[c(-1, -2)][[1]
]
parseSerie(ds[[1]])
parseSerie(ds[[1]])
parseSerie(ds[[1]])
parseSerie(ds[[1]])
res <- parseSerie(ds[[1]])
res
res <- parseSerie(ds[[1]])
res
res[, .(colnames(res)):= lapply(.SD, as.numeric)]
res[, .(as.symbol(colnames(res))):= lapply(.SD, as.numeric)]
res <- res[, lapply(.SD, as.numeric)]
res
res$VaLUE
res$VALUE
res <- res[, lapply(.SD, as.numeric)]
res <- parseSerie(ds[[1]])
res
str(ds, 1)
library(parallel)
ds[1]
str(ds[1], 1)
str(ds[[1]], 1)
names(ds[[1]])
ds$Obs
ds[[1]]$Obs
ds[[1]]$Obs
data.frame(names(ds[1]), seq_along(names(ds[1])))
data.frame(names(ds[[1]]), seq_along(names(ds[1])))
data.frame(names(ds[[1]]), seq_along(ds[[1]]))
list(names(ds[[1]]), seq_along(ds[[1]]))
data.frame(names(ds[[1]]), seq_along(ds[[1]])
)
data.table(names(ds[[1]]), seq_along(ds[[1]]))
data.table(names(ds[[1]]), seq_along(ds[[1]]))[V1=='OBS']
data.table(names(ds[[1]]), seq_along(ds[[1]]))[V1=='Obs']
data.table(names(ds[[1]]), seq_along(ds[[1]]))[V1=='Obs']
rbindlist(list(data.table(x=c(1, 2)), NULL,data.table(x=c(1, 2))))
n
n
n
n
n
n
n
n
n
n
n
n
meta.data
res
cbind(meta.data, res)
c
options(mc.cores)
detectCores()
res
res
str(ds, 3)
str(ds, 3)
str(ds, 2)
lapply(ds, function(l) names(l)[1])
]
res
ds[1]
ds[[1]]
ds[[1]][[2]]
ds[[1]][2]
ds[[1]][[2]][2]
as.data.table(ds[[1]][[2]][2])
data.table(ds[[1]][[2]][2])
data.table(ds[[1]][[2]][[2]])
s <- ds[[1]]
s
serie <- s
attr.data <- parseSeriesKey(serie$Attributes)
attr.data
res
summary(res$Value.VARIABLE)
table(res$Value.VARIABLE)
length(table(res$Value.VARIABLE))
res
res.d <- dcast(res, Location+Time ~ .)
nx
nx
nx
new.nx
res
res
names(res)
colnames(res)
res
?tolower
?tolower
res
res
res.d
res.d[, lapply(.SD, function(x) sum(is.na(x)))]
res.d[, lapply(.SD, function(x) sum(is.na(x))/length(x))]
as.numeric(res.d[, lapply(.SD, function(x) sum(is.na(x))/length(x))])
t(res.d[, lapply(.SD, function(x) sum(is.na(x))/length(x))])
sort(t(res.d[, lapply(.SD, function(x) sum(is.na(x))/length(x))]))
t(res.d[, lapply(.SD, function(x) sum(is.na(x))/length(x))])
help(write.csv)
gsub('\\.xml$', '_melt.csv', file.path)
file.path

. + 
gsub('\\.xml$', '_melt.csv', 'xml.xml')
csvx
csvx
csvx
csvx
warnings()
eos[[1]]
eos[[1]][, lapply(.SD, summary)]
eos[[1]][, lapply(.SD, function(x) print(summary(x)))]
summary(eos[[1]])
eos[[1]]
eos[[2]]
eos
csvx
csvx
eos
eos
eos
eos
eos
eos
eos
eos
eos
eos
eos
eos[[1]]
summary(eos)
summary(eos[[1]])
eos
eos
eos
eos
eos[, as.numeric(VALUE)]
eos[[1]][, as.numeric(VALUE)]
eos <- lapply(eos, function(eo) eo[, VALUE:=as.numeric(VALUE)]) 
eos
k
eos
eos
eos
eos
eos.melt
eos
eos
eos
eos
time
eos[[1]]['Switzerland']
eos[[1]]
unique(eos[[1]]$country)
country.a
country.q
missing.country
x
x
eos[[1]]
eos[[1]]$TIME
quarters
eos$eo.quarter$TIME
quarter.subs
quarters
quarters
quarters
quarters
quarter-string
quarter.strings
quarter.strings
)
quarter.strings
quarter.strings
eos$eo.quarter
eos
a
y
y
k
library(plotly)
plot_ly(z=volcano, type='surface')
plot_ly(z=volcano, type='surface', color='RdYlBu')
plot_ly(z=volcano, type='surface', color='RdBu')
plot_ly(z=volcano, type='surface', colors='RdYlBu')
plot_ly(z=volcano, type='surface', colors='RdYlBu', width=1280)
install.packages(c('readstata13', 'tikz', 'stargazer')
)
eos
install.packages('tikzDevice')
eos
x
x
x
y
x
x
x
gg
gg
x
eos[[1]]
colnames(x)
x[, cols, with=F]
cols
missing.rate
x[, cols, with=F]
y
as.matrix(y)
as.matrix(as.numeric(y))
as.matrix(as.numeric(as.data.frame(y)))
as.matrix(as.numeric(y))
n
n
n
list(NULL)
y.impute
y
y[, lapply(.SD, mode)]
warnings()
y.impute
n
n
n
n
n
n
n
n
n
y
y
y.impute
imputations
imputations
y.impute
library(amelia
)
library(Ameliae)
library(Amelia)
y
y[, lapply(.SD, mode)]
y[, TIME:=NULL]
mice::complete(mice::mice(y, n), i)
y
softImpute::softImpute(y, 200)
softImpute::softImpute(y, 100)
imputeDataSoftImpute(y, 100)
imputeDataSoftImpute(y, rank.max=100)
n
n
args
n
n
n
n
imputeDataSoftImpute(as.data.frame(y), rank.max=100)
n
n
n
n
n
n
n
n
n
n
n
n
n
ncol(y)
y.impute
summary(y.lm.lower)
y.step.low
summary(y.step.low)
summary(y.step.up)
s <- summary(y.lm.up)
s <- summary(y.step.up)
str(s, 1)
s$coefficients
s$coefficients[, 1]
round(s$coefficients[, 1], 3)
Filter(function(x) x > 0, round(s$coefficients[, 1], 3))
Filter(function(x) x > 0, round(s$coefficients[, 1], 4))
sort(Filter(function(x) x > 0, round(s$coefficients[, 1], 4)))
nx <- sort(Filter(function(x) x > 0, round(s$coefficients[, 1], 4)))
s$coefficients[nx,]
s$coefficients[which(names(s$coefficients) %in% nx)e,]
s$coefficients[which(names(s$coefficients) %in% nx),]
which(names(s$coefficients) %in% nx)
which(rownames(s$coefficients) %in% nx)
dim(s$coefficients)
rownames(s$coefficients)
rownames(s$coefficients) %in% names(nx)
nx <- which(rownames(s$coefficients) %in% names(nx))
nx
s$coefficients[nx, ]
apply(s$coefficients[nx, ], 1:2, round, 4)
apply(s$coefficients[nx, ], 1:2, round, 2)
apply(s$coefficients[nx, ], 1:2, round, 3)
require(stats) # for median
med.att <- apply(attitude, 2, median)
sweep(data.matrix(attitude), 2, med.att)  # subtract the column medians

swepp
y.impute
y
as.data.frame(y)
library(Hmisc)
na.pattern(y)
sort(na.pattern(y))
colnames(y)
y.impute
library(glmnet)        
?kappa
install.packages('car')
car
help(package=car)
lm(egr ~ ., y)
summary(lm(egr ~ ., y))
help(subset)
Filter(function(x) !x %in% c('et'), colnames(y))
Filter(function(x) !x %in% c('et'), colnames(y))
str(ds, 1)
ds[[0]]
ds[[]]
ds[[1]]
str(ds[[1]])
head(eo.names)
head(eo.cnames)
eo.var.names
eo.var.names
eo.var.names
eo.var.names
eo.var.names
eo.var.names
eo.var.names['bssi']
eo.var.names
setkeyv(eo.var.names, 'VARIABLE')
eo.var.names['bsii']
eo.var.names['yrh_g']
eo.var.names['yrh_g', Variable]
eo.var.names['yrh_g']
eo.var.names['bsii']
reformoluate
unselect(y, 'egr')
missing.rate
sort(missing.rate)
missing.rate
y
y.lm <- lm(egr ~ ., y)
y.lm
summary(y.lm)
summary(y.lm)$R
str(summary(y.lm))
summary(y.lm)$.adj.r.squared
summary(y.lm)$adj.r.squared
summary(y.lm) %$& .adj.r.squared
summary(y.lm) %$% .adj.r.squared
summary(y.lm) %$% adj.r.squared
vif(y)
vif(y)
vif(y)
vif(y)
vif(y)
vifs
vifs
vifs
unlist(vifs)
names(unlist(vifs))
eo.desc[names(unlist(vifs))]
eo.desc[names(unlist(vifs)), VARIABLE]
eo.desc[names(unlist(vifs)), Variable
]
eo.desc[names(unlist(vifs)), Variable]
vifs
unlist(vifs)
as.data.table(vifs)
t(as.data.table(vifs))
data.table(vifs)
data.table(vifs, names=vifs)
data.table(vifs, names=(vifs))
data.table(vifs, names=names(vifs))
data.table(vifs, names=names(vifs), desc=eo.desc[names(vifs)])
data.table(vifs, names=names(vifs), desc=eo.desc[names(vifs), Variable])
data.table(vifs, names=names(vifs), desc=eo.desc[names(vifs), Variable])[order(vifs)]
data.table(unlist(vifs), names=names(vifs), desc=eo.desc[names(vifs), Variable])
data.table(vifs=unlist(vifs), names=names(vifs), desc=eo.desc[names(vifs), Variable])
vifs.dt
as.data.frame(vifs.dt)
as.data.frame(vifs.dt)[order(vifs)]
vifs.dt
vifs.dt[oder(vifs)]
vifs.dt[order(vifs)]
as.data.frame(vifs.dt[order(vifs)])
eos
