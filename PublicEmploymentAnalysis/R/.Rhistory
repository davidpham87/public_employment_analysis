n
imputeDataSoftImpute(as.data.frame(y), rank.max=100)
n
n
n
n
n
n
n
n
n
n
n
n
n
ncol(y)
y.impute
summary(y.lm.lower)
y.step.low
summary(y.step.low)
summary(y.step.up)
s <- summary(y.lm.up)
s <- summary(y.step.up)
str(s, 1)
s$coefficients
s$coefficients[, 1]
round(s$coefficients[, 1], 3)
Filter(function(x) x > 0, round(s$coefficients[, 1], 3))
Filter(function(x) x > 0, round(s$coefficients[, 1], 4))
sort(Filter(function(x) x > 0, round(s$coefficients[, 1], 4)))
nx <- sort(Filter(function(x) x > 0, round(s$coefficients[, 1], 4)))
s$coefficients[nx,]
s$coefficients[which(names(s$coefficients) %in% nx)e,]
s$coefficients[which(names(s$coefficients) %in% nx),]
which(names(s$coefficients) %in% nx)
which(rownames(s$coefficients) %in% nx)
dim(s$coefficients)
rownames(s$coefficients)
rownames(s$coefficients) %in% names(nx)
nx <- which(rownames(s$coefficients) %in% names(nx))
nx
s$coefficients[nx, ]
apply(s$coefficients[nx, ], 1:2, round, 4)
apply(s$coefficients[nx, ], 1:2, round, 2)
apply(s$coefficients[nx, ], 1:2, round, 3)
require(stats) # for median
med.att <- apply(attitude, 2, median)
sweep(data.matrix(attitude), 2, med.att)  # subtract the column medians

swepp
y.impute
y
as.data.frame(y)
library(Hmisc)
na.pattern(y)
sort(na.pattern(y))
colnames(y)
y.impute
library(glmnet)        
?kappa
install.packages('car')
car
help(package=car)
lm(egr ~ ., y)
summary(lm(egr ~ ., y))
help(subset)
Filter(function(x) !x %in% c('et'), colnames(y))
Filter(function(x) !x %in% c('et'), colnames(y))
str(ds, 1)
ds[[0]]
ds[[]]
ds[[1]]
str(ds[[1]])
head(eo.names)
head(eo.cnames)
eo.var.names
eo.var.names
eo.var.names
eo.var.names
eo.var.names
eo.var.names
eo.var.names['bssi']
eo.var.names
setkeyv(eo.var.names, 'VARIABLE')
eo.var.names['bsii']
eo.var.names['yrh_g']
eo.var.names['yrh_g', Variable]
eo.var.names['yrh_g']
eo.var.names['bsii']
reformoluate
unselect(y, 'egr')
missing.rate
sort(missing.rate)
missing.rate
y
y.lm <- lm(egr ~ ., y)
y.lm
summary(y.lm)
summary(y.lm)$R
str(summary(y.lm))
summary(y.lm)$.adj.r.squared
summary(y.lm)$adj.r.squared
summary(y.lm) %$& .adj.r.squared
summary(y.lm) %$% .adj.r.squared
summary(y.lm) %$% adj.r.squared
vif(y)
vif(y)
vif(y)
vif(y)
vif(y)
vifs
vifs
vifs
unlist(vifs)
names(unlist(vifs))
eo.desc[names(unlist(vifs))]
eo.desc[names(unlist(vifs)), VARIABLE]
eo.desc[names(unlist(vifs)), Variable
]
eo.desc[names(unlist(vifs)), Variable]
vifs
unlist(vifs)
as.data.table(vifs)
t(as.data.table(vifs))
data.table(vifs)
data.table(vifs, names=vifs)
data.table(vifs, names=(vifs))
data.table(vifs, names=names(vifs))
data.table(vifs, names=names(vifs), desc=eo.desc[names(vifs)])
data.table(vifs, names=names(vifs), desc=eo.desc[names(vifs), Variable])
data.table(vifs, names=names(vifs), desc=eo.desc[names(vifs), Variable])[order(vifs)]
data.table(unlist(vifs), names=names(vifs), desc=eo.desc[names(vifs), Variable])
data.table(vifs=unlist(vifs), names=names(vifs), desc=eo.desc[names(vifs), Variable])
vifs.dt
as.data.frame(vifs.dt)
as.data.frame(vifs.dt)[order(vifs)]
vifs.dt
vifs.dt[oder(vifs)]
vifs.dt[order(vifs)]
as.data.frame(vifs.dt[order(vifs)])
eos
x
x[, cols]
x[, cols, with=F]
na.omit(x[, cols, with=F])
na.omit(x[, cols, with=F])[, range(TIME), by="country"]
na.omit(x[, cols, with=F])[, {rg <- range(TIME), list(rg[[1]], rg[[2]])}, by="country"]
na.omit(x[, cols, with=F])[, {rg <- range(TIME); list(rg[[1]], rg[[2]])}, by="country"]
x[, cols, with=F][, {rg <- range(TIME), list(rg[[1]], rg[[2]])}, by="country"]
x[, cols, with=F]
x[, cols, with=F][, {rg <- range(TIME), list(rg[[1]], rg[[2]])}, by="country"]
y <- x[, cols, with=F]
y[, {rg <- range(TIME), list(rg[[1]], rg[[2]])}, by="country"]
x[, cols, with=F][, {rg <- range(TIME); list(rg[[1]], rg[[2]])}, by="country"]
na.omit(x[, cols, with=F])[, {rg <- range(TIME); list(rg[[1]], rg[[2]])}, by="country"]
new.data
new.data
joinDataTable(new.data)
DT <- joinDataTable(new.data)
lapply(DT, summary)
new.data
new.data[['gini']]
keys(new.data[['gini']])
key(new.data[['gini']])
lapply(DT, summary)
DT <- joinDataTable(new.data)
DT
DT <- joinDataTable(new.data)
DT
DT[, lapply(.SD, summary)]
lapply(DT, summary)
DT
new.data
key(x)
x
new.data
x
new.data
cols.exteneded
cols.extended
x.new
unselect
x.new[, list(pop, lpop)]
x.new[, lapply(list(pop, lpop), summary)]
x.new[, lapply(list(pop, lpop), function(x) print(summary(x)))]
x
colnames(x)
x.new[, pop]
summary(x.new[, pop])
x
unselect(cols, 'lpop')
dt.test
y.mice <- mice::mice(y, 5)
y
y
VIF(y)
library(parallel)
loadPackages()
VIF(y)
VIF(y)
VIF(unselect(y, 'egr'))
VIF(unselect(y, 'egr'))
unselect(y, 'egr')[, lapply(.SD, scales)]
unselect(y, 'egr')[, lapply(.SD, scale)]
mode(c(1, 2)
mode(c(1, 2)
mode(c(1, 2))
unselect(y, 'egr')[, lapply(.SD, scaleNumeric)]
VIF(unselect(y, 'egr')[, lapply(.SD, scaleNumeric)])
cor(y)
cor(as.numeric(y))
cor(as.matrix(y))
y$country
unselect(y, 'egr')[, lapply(.SD, scaleNumeric)]
fctrs2num(unselect(y, 'egr')[, lapply(.SD, scaleNumeric)])
fctrs2num(as.data.frame(unselect(y, 'egr')[, lapply(.SD, scaleNumeric)]))
VIF(fctrs2num(as.data.frame(unselect(y, 'egr')[, lapply(.SD, scaleNumeric)])))
fctrs2num(as.data.frame(unselect(y, 'egr')[, lapply(.SD, scaleNumeric)]))$country
str2fctrs(as.data.frame(unselect(y, 'egr')[, lapply(.SD, scaleNumeric)]))$country
str2fctrs(as.data.frame(unselect(y, 'egr')[, lapply(.SD, scaleNumeric)]))$country
n
n
n
lvls
fctrs
dataset$country
class(dataset$country)
n
c
str2fctrs(as.data.frame(unselect(y, 'egr')[, lapply(.SD, scaleNumeric)]))$country
help(`[`)
help('[')
str2fctrs(as.data.frame(unselect(y, 'egr')[, lapply(.SD, scaleNumeric)]))$country
str2fctrs(as.data.frame(unselect(y, 'egr')[, lapply(.SD, scaleNumeric)]))$country
str2fctrs(as.data.frame(unselect(y, 'egr')[, lapply(.SD, scaleNumeric)]))$country
str2fctrs(as.data.frame(y[, lapply(.SD, scaleNumeric)]))
str2fctrs(as.data.frame(y[, lapply(.SD, scaleNumeric)]))$country
y
na.pattern(y)
library(Hmisc)
na.pattern(y)
y
y
new.data
y
mice::imputation(y)
mice::mice(y)
library(mi)
mi::mi(y)
install.packages('betareg')
mi::mi(y)
warnings()
options(mc.cores=8)
mi.impute <- mi::mi(y)
warnings()
mi.impute
mi::complete(mi.impute, 1)
round(mipply(mi.impute, mean, to.matrix = TRUE), 3)
pool(egr ~ ., data=mi.impute, m=5)
mdf <- missing_data.frame(y)
y$gdp_per_capita
mdf <- missing_data.frame(y)
help(lm)
mdf
image(mdf)
help(image)
help(mi::image)
class(mdf)
image.missing_data.frame
hist(mdf)
warnings()
mi.imputations
mipply(
mi.imputations, mean)
mi::complete(y, mi.imputation, 1)
mi::complete(y, mi.imputations, 1)
mi::complete(mdf, mi.imputations, 1)
mi::complete(as.data.frame(y), mi.imputations, 1)
mi::complete(mi.imputations, 1)
mi::complete(mi.imputations, 1)
eo.desc
x.lm.s$coefficient
x.lm.s$coefficient$names
rownames(x.lm.s$coefficient)
unselect(cols, c('lpop', 'ydrh', 'ypgtq'))
cols.extended
eo.desc[cols.extended]
x.lms.s
x.lm.s
install.packages('DescTools')
library(DescTools)
d.country
d.countries
subset(d.countries, name %in% c('Greece', 'Italy', 'Norway', 'Belgium', 'Denmark', 'Germany', 'Ireland',
'Spain', 'Switzerland', 'Austria', 'France', 'Portugal', 'Canada', 'Finland',
'Netherlands', 'Sweden', 'Australia', 'United Kingdom', 'United States', 'New
Zealand'))
subset(d.countries, name %in% c('Greece', 'Italy', 'Norway', 'Belgium', 'Denmark', 'Germany', 'Ireland',
'Spain', 'Switzerland', 'Austria', 'France', 'Portugal', 'Canada', 'Finland',
'Netherlands', 'Sweden', 'Australia', 'United Kingdom', 'United States', 'New
Zealand'))$a3
subset(d.countries, name %in% c('Greece', 'Italy', 'Norway', 'Belgium', 'Denmark', 'Germany', 'Ireland',
'Spain', 'Switzerland', 'Austria', 'France', 'Portugal', 'Canada', 'Finland',
'Netherlands', 'Sweden', 'Australia', 'United Kingdom', 'United States', 'New
Zealand'))[, a2]
subset(d.countries, name %in% c('Greece', 'Italy', 'Norway', 'Belgium', 'Denmark', 'Germany', 'Ireland',
'Spain', 'Switzerland', 'Austria', 'France', 'Portugal', 'Canada', 'Finland',
'Netherlands', 'Sweden', 'Australia', 'United Kingdom', 'United States', 'New
Zealand'))[, 3]
subset(d.countries, name %in% c('Greece', 'Italy', 'Norway', 'Belgium', 'Denmark', 'Germany', 'Ireland',
'Spain', 'Switzerland', 'Austria', 'France', 'Portugal', 'Canada', 'Finland',
'Netherlands', 'Sweden', 'Australia', 'United Kingdom', 'United States', 'New
Zealand'))[, 3, drop=F]
lcols
cols
deo.desc[cols]
eo.desc[cols]
eos[[1]]
colnames(eos[[1]])
eo.desc
data.frame(eo.desc)
data.frame(eo.desc)
x.new
gg <- ggplot(x.new, aes(TIME, exp(lpoptot))) + geom_line() + facet_wrap(~country)
library(plotly)
ggplotly(gg)
gg <- ggplot(melt(x.new[, list(TIME, country, lpop, lpoptot)], id.vars=c('TIME', 'country')), aes(TIME, value)) + geom_line(aes(color=variable)) + facet_wrap(~country)
gg
gg <- ggplot(melt(x.new[, list(TIME, country, lpop, lpoptot)], id.vars=c('TIME', 'country')), aes(TIME, exp(value))) + geom_line(aes(color=variable)) + facet_wrap(~country)
ggplotly(gg)
gg
gg
plot.data
plot.data
head(plot.data, 20)
head(plot.data, 50)
head(plot.data, 100)
head(plot.data[order(TIME, country)], 100)
head(plot.data[order(country, TIME)], 100)
head(plot.data[order(country, TIME)], 100)
gg
x
x[, gdp]
library(lattice)
ggplot(x, aes(TIME, gdp)) + facet_wrap(. ~ country)
head(x)
ggplot(as.data.frame(x), aes(TIME, gdp)) + facet_wrap(. ~ country)
ggplot(x, aes(TIME, gdp)) + geom_line() + facet_wrap(. ~ country)
ggplot(x, aes(TIME, gdp)) + geom_line() + facet_wrap( ~ country)
ggplot(x, aes(TIME, gdpv)) + geom_line() + facet_wrap( ~ country)
ggplot(x.new, aes(TIME, gdp_per_capita)) + geom_line() + facet_wrap( ~ country)
x[J('USA', 'JPN')],
x[J('USA', 'JPN')]
x.new
n
args
list(...)
as.symbol(...)
expression(...)
bquote(...)
c
n
args
arg
n
arg
lapply(arg, as.symbol)
c
n
n
args
arg
x.new
x.new[, eval(arg)]
x.new[, arg]
x.new[, lapply(arg, function(i) i)]
x.new[, lapply(arg, function(x) x)]
c
c
x.new
plot.data
fread('../data/imf_gfs_scores_cleaned.csv')
x.new
colnames(x.new)
fread('../data/imf_gfs_scores_cleaned.csv')
fread('../data/imf_gfs_scores_cleaned.csv')$TIME
fread('../data/gini_cleaned.csv')$TIME
new.data
na.omit(new.data$fiscal_transparency)
new.data$fiscal_transparency
new.data[, list(TIME, fiscal_transparency)]
new.data[, list(TIME, country, fiscal_transparency)]
new.data[, list(TIME, location, fiscal_transparency)]
na.omit(new.data[, list(TIME, location, fiscal_transparency)])
ggplot(na.omit(new.data[, list(TIME, location, fiscal_transparency)]), aes(TIME, fiscal_transparency)) + geom_line() + facet_wrap(~ country)
ggplot(na.omit(new.data[, list(TIME, location, fiscal_transparency)]), aes(TIME, fiscal_transparency)) + geom_line() + facet_wrap(~ location)
x.new
nrow(x.new)
cols.extended
x.new
cols
cols.extended
unique(cols.extended)
cols
cols.extended
x.lm.s$data
str(x.lm.s)
x.lm.s$model
nrow(str(x.lm.s))
nrow(x.lm.s$model)
as.data.ble(x.lm.s$model)
as.data.table(x.lm.s$model)
eo.desc
as.data.frame(eo.desc)
x.new
x.new
cols
imf.gfs
imf.gfs
imf.gfs
img.fs
imf.gfs
img.gfs
imf.gfs
x.new
x.new[, list(country, fiscal_transparency)]
unique(x.new[, list(country, fiscal_transparency)])
unique(x.new[, list(country, fiscal_transparency)]$country)
x.new
x.new
x.new$imf_gfs
x.lm.s$model
x.lm$model
data.table(x.lm$model)
library(plotly)
gg
data.plot
'
)
'
plot(x.lm)
x.lm$model
eo.desc[[cols]
]
eo.desc[cols]
head(x[, gdpv])
head(x[, list(country, gdpv)])
122610101941*1e-6
122610101941*1e-9
head(x[, list(country, gdpv, ydrh, ydrh/gdpv)])
head(eos[[1]][, list(country, gdpv, ydrh, ydrh/gdpv)])
eo.desc['ydrh']
eos[[1]][country.a]
eos[[1]][country.a][, head(.SD, 5), by='country']
eos[[1]][country.a][, tail(.SD, 1), by='country'][
]
eos[[1]][country.a][TIME==2014[, tail(.SD, 1), by='country']
]
eos[[1]][country.a][TIME==2014][, tail(.SD, 1), by='country']
eo.desc['yrh']
eos[[1]][country.a][TIME==2014][, tail(.SD, 1), by='country'][, list(country, ydrh, gdpv)]
x.lm$model
nrow(x.lm$model)
x.simple.model
x.lm.s
x.step.loww
x.step.low
x.lm.lower
x.lm
x.step.up
x.lm
summary(x.lm)
incomeineq.lm$model
nrow(incomeineq.lm$model)
as.data.table(incomeineq.lm$model)
as.data.table(lpoptot.lm$model)
as.data.table(incomeineq.lm$model)
setkey(x.new, TIME, country)
)
img.gfs
imf.gfs
x.new
x.new
ls
getwd()
setwd('/R')
setwd('"/home/david/gdrive/ETHZ/public_employment/PublicEmploymentAnalysis/R"e)
)
'
"
'
'
'"
setwd("/home/david/gdrive/ETHZ/public_employment/PublicEmploymentAnalysis/R")
gini
gini.metl
gini.melt
2
n
getwd()
